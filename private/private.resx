<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="imglogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>